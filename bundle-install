#!/usr/bin/env bash


__SOURCE__="${BASH_SOURCE[0]}"
while [[ -h "${__SOURCE__}" ]]; do
    __SOURCE__="$(find "${__SOURCE__}" -type l -ls | sed -n 's@^.* -> \(.*\)@\1@p')"
done
__DIR__="$(cd -P "$(dirname "${__SOURCE__}")" && pwd)"
__NAME__="${__SOURCE__##*/}"
__AUTHOR__='S0AndS0'
__DESCRIPTION__='Installs dependencies listed within Gemfile.lock file of named repository'


## Provides 'failure'
source "${__DIR__}/shared_functions/modules/trap-failure/failure.sh"
trap 'failure "LINENO" "BASH_LINENO" "${BASH_COMMAND}" "${?}"' ERR

## Provides: argument_parser <arg-array-reference> <acceptable-arg-reference>
source "${__DIR__}/shared_functions/modules/argument-parser/argument-parser.sh"

## Provides: __license__ <description> <author>
source "${__DIR__}/shared_functions/license"


usage(){
    _message="${1}"
    _repo_name="${_repo_name:-repository-name}"
    cat <<EOF
## Usage
# ssh ${USER}@host-or-ip ${__NAME__} ${_repo_name}
#
# ${__DESCRIPTION__}
#
##  After installation be sure to run jekyll-build script against ${_repo_name}
##  eg: ssh ${USER}@host-or-ip jekyll-build ${_repo_name}
#
# ${_repo_name}
#  Name of repository to run 'bundle install' against.
#
# -l --license
# Shows script or project license then exits
#
# -h    --help help
#  Displays this message and exits
EOF
    (("${#_message}")) && [[ "${_message}" != '0' ]] && {
        printf >&2 'Error - %s\n' "${_message}"
    }
}

_args=("${@:?# No arguments provided try: ${__NAME__} help}")
_valid_args=('--help|-h|help:bool'
             '--license|-l|license:bool'
             '--repo-name:posix-nil')
argument_parser '_args' '_valid_args'
_exit_status="$?"


if ((_help)) || ((_exit_status)); then
    usage "${_exit_status}"
    exit "${_exit_status}"
elif ((_license)); then
    __license__ "${__DESCRIPTION__}" "${__AUTHOR__}"
    exit 0
fi

(("${#_repo_name}")) || {
    usage 'missing repository name argument'
    exit "1"
}


_git_path="${HOME}/git/${_repo_name}"
[[ -d "${_git_path}" ]] || {
    printf >&2 '# No repository %s at %s\n' "${_repo_name}" "${_git_path}"
    exit 1
}


[[ -d "${_git_path}/.git" ]] || {
    printf >&2 '# Repository %s maybe bare, this script cannot handle that right now\n' "${_repo_name}"
    exit 1
}


_bundle_path="${HOME}/.bundle/install"
_pwd="${PWD}"
cd "${_git_path}"
source "${HOME}/.bash_aliases"

[[ -f "${_git_path}/Gemfile" ]] || {
    bundle init
}


[[ -d "${_git_path}/.bundle" ]] || {
    bundle install --path "${_bundle_path}"
}


bundle install
cd "${_pwd}"


printf '# %s finished\n' "${__NAME__}"
